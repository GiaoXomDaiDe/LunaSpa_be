import axios from 'axios'
import React, { useEffect, useState } from 'react'
import { Link, useParams } from 'react-router-dom'
import './OrderStatus.css'

const OrderStatus = () => {
  const { orderId } = useParams()
  const [order, setOrder] = useState(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [showCancelDialog, setShowCancelDialog] = useState(false)
  const [cancelReason, setCancelReason] = useState('')
  const [cancelLoading, setCancelLoading] = useState(false)
  const [cancelError, setCancelError] = useState(null)

  useEffect(() => {
    // G·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin ƒë∆°n h√†ng
    const fetchOrderStatus = async () => {
      try {
        const response = await axios.get(`http://localhost:4000/orders/${orderId}`, {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('access_token')}`
          }
        })

        if (response.data && response.data.result) {
          setOrder(response.data.result)
        } else {
          setError('Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng')
        }
      } catch (err) {
        console.error('L·ªói khi l·∫•y th√¥ng tin ƒë∆°n h√†ng:', err)
        setError('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.')
      } finally {
        setLoading(false)
      }
    }

    if (orderId) {
      fetchOrderStatus()
    }
  }, [orderId])

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND',
      minimumFractionDigits: 0
    }).format(amount)
  }

  // Th√™m h√†m h·ªßy ƒë∆°n h√†ng
  const handleCancelOrder = async () => {
    if (!cancelReason.trim()) {
      setCancelError('Vui l√≤ng nh·∫≠p l√Ω do h·ªßy ƒë∆°n h√†ng')
      return
    }

    setCancelLoading(true)
    setCancelError(null)

    try {
      const response = await axios.post(
        `http://localhost:4000/orders/${orderId}/cancel`,
        { cancel_reason: cancelReason },
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('access_token')}`
          }
        }
      )

      if (response.data) {
        // C·∫≠p nh·∫≠t l·∫°i th√¥ng tin ƒë∆°n h√†ng sau khi h·ªßy
        const updatedOrder = await axios.get(`http://localhost:4000/orders/${orderId}`, {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('access_token')}`
          }
        })

        if (updatedOrder.data && updatedOrder.data.result) {
          setOrder(updatedOrder.data.result)
        }

        // ƒê√≥ng dialog
        setShowCancelDialog(false)
        setCancelReason('')
      }
    } catch (err) {
      console.error('L·ªói khi h·ªßy ƒë∆°n h√†ng:', err)
      setCancelError(err.response?.data?.message || 'Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.')
    } finally {
      setCancelLoading(false)
    }
  }

  if (loading) {
    return <div className='loading'>ƒêang t·∫£i th√¥ng tin ƒë∆°n h√†ng...</div>
  }

  if (error) {
    return <div className='error-message'>{error}</div>
  }

  if (!order) {
    return <div className='error-message'>Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng</div>
  }

  // Ki·ªÉm tra xem ƒë∆°n h√†ng c√≥ th·ªÉ h·ªßy hay kh√¥ng
  const canCancel = order.status === 'pending' || order.status === 'PENDING'

  // Hi·ªÉn th·ªã tr·∫°ng th√°i thanh to√°n d·ª±a tr√™n tr·∫°ng th√°i t·ª´ ƒë∆°n h√†ng
  const getPaymentStatusUI = () => {
    // L·∫•y tr·∫°ng th√°i thanh to√°n t·ª´ ƒë∆°n h√†ng
    const orderStatus = order.status

    switch (orderStatus) {
      case 'CONFIRMED':
      case 'confirmed':
        return (
          <div className='payment-status success'>
            <div className='status-icon'>‚úÖ</div>
            <div className='status-text'>
              <h3>Thanh to√°n th√†nh c√¥ng</h3>
              <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng. ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.</p>
            </div>
          </div>
        )
      case 'COMPLETED':
      case 'completed':
        return (
          <div className='payment-status success'>
            <div className='status-icon'>‚úÖ</div>
            <div className='status-text'>
              <h3>ƒê∆°n h√†ng ƒë√£ ho√†n th√†nh</h3>
              <p>ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ho√†n th√†nh. C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i.</p>
            </div>
          </div>
        )
      case 'PROCESSING':
      case 'processing':
        return (
          <div className='payment-status processing'>
            <div className='status-icon'>üîÑ</div>
            <div className='status-text'>
              <h3>ƒêang x·ª≠ l√Ω</h3>
              <p>ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω. Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t.</p>
            </div>
          </div>
        )
      case 'PENDING':
      case 'pending':
        return (
          <div className='payment-status pending'>
            <div className='status-icon'>‚è≥</div>
            <div className='status-text'>
              <h3>Ch·ªù thanh to√°n</h3>
              <p>ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ch·ªù thanh to√°n.</p>
              {canCancel && (
                <button className='cancel-order-btn' onClick={() => setShowCancelDialog(true)}>
                  H·ªßy ƒë∆°n h√†ng
                </button>
              )}
            </div>
          </div>
        )
      case 'CANCELLED':
      case 'cancelled':
        return (
          <div className='payment-status cancelled'>
            <div className='status-icon'>‚ùå</div>
            <div className='status-text'>
              <h3>ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy</h3>
              <p>ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy.</p>
              {order.note && <p>L√Ω do: {order.note}</p>}
            </div>
          </div>
        )
      case 'FAILED':
      case 'failed':
        return (
          <div className='payment-status failed'>
            <div className='status-icon'>‚ùå</div>
            <div className='status-text'>
              <h3>Thanh to√°n th·∫•t b·∫°i</h3>
              <p>Thanh to√°n kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n kh√°c.</p>
              <Link to={`/checkout/retry/${orderId}`} className='retry-payment'>
                Th·ª≠ l·∫°i thanh to√°n
              </Link>
            </div>
          </div>
        )
      default:
        return (
          <div className='payment-status unknown'>
            <div className='status-icon'>‚ùì</div>
            <div className='status-text'>
              <h3>Tr·∫°ng th√°i kh√¥ng x√°c ƒë·ªãnh</h3>
              <p>Kh√¥ng th·ªÉ x√°c ƒë·ªãnh tr·∫°ng th√°i thanh to√°n. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.</p>
              <p>Tr·∫°ng th√°i ƒë∆°n h√†ng: {orderStatus}</p>
            </div>
          </div>
        )
    }
  }

  return (
    <div className='order-status-container'>
      <div className='order-status-header'>
        <h2>Tr·∫°ng th√°i ƒë∆°n h√†ng</h2>
        <p className='order-id'>M√£ ƒë∆°n h√†ng: {order.order_id || orderId}</p>
      </div>

      <div className='order-status-content'>
        {getPaymentStatusUI()}

        <div className='order-details'>
          <h3>Chi ti·∫øt ƒë∆°n h√†ng</h3>
          <div className='order-info'>
            <div className='info-row'>
              <span className='info-label'>Ng√†y ƒë·∫∑t:</span>
              <span className='info-value'>{new Date(order.created_at).toLocaleString('vi-VN')}</span>
            </div>
            <div className='info-row'>
              <span className='info-label'>T·ªïng ti·ªÅn:</span>
              <span className='info-value'>{formatCurrency(order.final_price || order.total_amount || 0)}</span>
            </div>
            <div className='info-row'>
              <span className='info-label'>Ph∆∞∆°ng th·ª©c thanh to√°n:</span>
              <span className='info-value'>
                {order.payment_method === 'stripe'
                  ? 'Th·∫ª t√≠n d·ª•ng/Ghi n·ª£ (Stripe)'
                  : order.payment_method === 'momo'
                    ? 'V√≠ ƒëi·ªán t·ª≠ MoMo'
                    : order.payment_method || 'Kh√¥ng x√°c ƒë·ªãnh'}
              </span>
            </div>
            {order.note && (
              <div className='info-row'>
                <span className='info-label'>Ghi ch√∫:</span>
                <span className='info-value'>{order.note}</span>
              </div>
            )}
          </div>
        </div>

        <div className='next-actions'>
          <Link to='/' className='action-button primary'>
            V·ªÅ trang ch·ªß
          </Link>
          <Link to='/products' className='action-button secondary'>
            Ti·∫øp t·ª•c mua s·∫Øm
          </Link>
          {canCancel && (
            <button onClick={() => setShowCancelDialog(true)} className='action-button cancel'>
              H·ªßy ƒë∆°n h√†ng
            </button>
          )}
        </div>
      </div>

      {/* Modal h·ªßy ƒë∆°n h√†ng */}
      {showCancelDialog && (
        <div className='cancel-order-modal'>
          <div className='cancel-order-content'>
            <h3>X√°c nh·∫≠n h·ªßy ƒë∆°n h√†ng</h3>
            <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ƒë∆°n h√†ng n√†y?</p>

            <div className='cancel-reason-form'>
              <label htmlFor='cancel-reason'>L√Ω do h·ªßy ƒë∆°n h√†ng:</label>
              <textarea
                id='cancel-reason'
                value={cancelReason}
                onChange={(e) => setCancelReason(e.target.value)}
                placeholder='Vui l√≤ng nh·∫≠p l√Ω do h·ªßy ƒë∆°n h√†ng'
                disabled={cancelLoading}
              ></textarea>
              {cancelError && <div className='cancel-error'>{cancelError}</div>}
            </div>

            <div className='cancel-actions'>
              <button onClick={() => setShowCancelDialog(false)} className='cancel-button' disabled={cancelLoading}>
                ƒê√≥ng
              </button>
              <button onClick={handleCancelOrder} className='confirm-button' disabled={cancelLoading}>
                {cancelLoading ? 'ƒêang x·ª≠ l√Ω...' : 'X√°c nh·∫≠n h·ªßy'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default OrderStatus
